apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "com.google.protobuf" 
android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.ml.xposedproject"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "buildTime", "\"${buildTime()}\""

    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    viewBinding {
        enabled = true
    }
    signingConfigs {
        release {
            storeFile file('../keystore.keystore')
            storePassword 'menglong'
            keyAlias 'key0'
            keyPassword 'menglong'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
   /* applicationVariants.all { variant ->
        // 打包完成后复制到的目录
        def outputFileDir = "${project.projectDir.absolutePath}/${variant.buildType.name}/${variant.flavorName}/${variant.versionName}"
        //确定输出文件名
        def today = new Date()
        def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ","")) + "_" +
                variant.flavorName + "_" +
                variant.buildType.name + "_"+
                variant.versionName + "_" +
                today.format('yyyyMMddhhmm') +
                ".apk"
        *//**
         *  gradleVersion 大于4.1
         *//*
        variant.outputs.forEach {
            it.outputFileName = path
        }
        // 打包完成后做的一些事,复制apk到指定文件夹,复制mapping等
        variant.assemble.doLast {
            File out = new File(outputFileDir)
            copy {
                from variant.mappingFile
                into  out
                rename {
                    String fileName -> "${variant.buildType.name}-${variant.flavorName}-mapping-${variant.versionName}.txt"
                }
                variant.outputs.forEach{ file->
                    copy{
                        from file.outputFile
                        into out
                    }
                }
            }
        }
    }
*/
}

def buildTime(){
    return new Date().format("yyyy-MM-dd HH:mm:ss",TimeZone.getDefault())
}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'

    
    implementation  "com.google.protobuf:protobuf-javalite:3.10.0"
    implementation "androidx.datastore:datastore:1.0.0-alpha04"

    implementation "com.google.dagger:hilt-android:2.28.3-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28.3-alpha"

    implementation 'com.tencent:mmkv-static:1.2.10'
}
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.10.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}