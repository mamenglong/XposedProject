apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: "com.google.protobuf"

android {
    compileSdk 33
    namespace 'com.ml.xposedproject'
    defaultConfig {
        applicationId "com.ml.xposedproject"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "buildTime", "\"${buildTime()}\""
        buildConfigField "long", "buildTimeStamp", "${buildTimeStamp()}"
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    kotlin {
        jvmToolchain(8)
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    viewBinding {
        enabled = true
    }
    signingConfigs {
        release {
            storeFile file('../keystore.keystore')
            storePassword 'menglong'
            keyAlias 'key0'
            keyPassword 'menglong'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        normal {
            flavorDimensions "app"
        }
        taichi {
            flavorDimensions "app"
            applicationId "com.mx.vpnjc"
        }
    }
    /* applicationVariants.all { variant ->
         // 打包完成后复制到的目录
         def outputFileDir = "${project.projectDir.absolutePath}/${variant.buildType.name}/${variant.flavorName}/${variant.versionName}"
         //确定输出文件名
         def today = new Date()
         def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ","")) + "_" +
                 variant.flavorName + "_" +
                 variant.buildType.name + "_"+
                 variant.versionName + "_" +
                 today.format('yyyyMMddhhmm') +
                 ".apk"
         *//**
     *  gradleVersion 大于4.1
     *//*
        variant.outputs.forEach {
            it.outputFileName = path
        }
        // 打包完成后做的一些事,复制apk到指定文件夹,复制mapping等
        variant.assemble.doLast {
            File out = new File(outputFileDir)
            copy {
                from variant.mappingFile
                into  out
                rename {
                    String fileName -> "${variant.buildType.name}-${variant.flavorName}-mapping-${variant.versionName}.txt"
                }
                variant.outputs.forEach{ file->
                    copy{
                        from file.outputFile
                        into out
                    }
                }
            }
        }
    }
*/
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getDefault())
}

static def buildTimeStamp() {
    return new Date().time
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //https://api.xposed.info/reference/de/robv/android/xposed/XposedHelpers.html
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'


    implementation 'com.google.protobuf:protobuf-java:3.19.4'
    implementation 'com.google.protobuf:protobuf-java-util:3.19.4'
    implementation("androidx.datastore:datastore:1.0.0")

    implementation 'com.google.dagger:hilt-android:2.45'
    kapt 'com.google.dagger:hilt-compiler:2.45'

    // For instrumentation tests
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.45'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.45'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.45'
    kaptTest 'com.google.dagger:hilt-compiler:2.45'

    implementation 'com.tencent:mmkv-static:1.2.16'

    implementation "com.google.auto.service:auto-service:1.1.1"
    annotationProcessor("com.google.auto.service:auto-service:1.1.1")
}

kapt {
    correctErrorTypes true
}
hilt {
    enableAggregatingTask = true
}
protobuf {
    //配置 protoc 编译器
    protoc {
        artifact = 'com.google.protobuf:protoc:3.19.2'
    }
    //配置生成目录，编译后会在 build 的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
            }
        }
    }
}